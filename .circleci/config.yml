version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  serverless: circleci/serverless-framework@1.0.1
jobs:
  test:
    docker:
      - image: circleci/node:14.16.1
      - image: circleci/mongo:4.4.6
    steps:
      - run:
          name: MongoDB Install
          command: |
             sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
             echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
             sudo apt-get update
             sudo apt-get install -y mongodb-org-shell
      - setup_remote_docker  # for the next step
      - run:
          name: Waiting for Mongo # wait until mongo is ready
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      - checkout
      - run:
          name: Set up .env
          command: mv .env.example .env
      - run:
          name: Npm install
          command: npm ci
      - run:
          name: Set Up MongoDB
          command: |
            mongo --eval 'db.createUser({ user: "jjj", pwd: "1234", roles: [ { role: "readWrite", db: "test" } ] })'
      - run:
          name: Test
          command: npm run test:overall
      - run:
          command: cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage
  sls-deploy:
    executor: serverless/default
    steps:
        - checkout
        - aws-cli/setup
        - run:
            name: install ts-node
            command: sudo npm i -g ts-node typescript
        - run:
            name: install modules
            command: npm ci
        - run:
            name: tsc
            command: tsc
        - serverless/setup:
            app-name: serverless-framework-orb
            org-name: circleci
        - run:
            command: serverless deploy -v
            name: deploy
workflows:
  version: 2
  deploy:
    jobs:
      - test
      - sls-deploy:
          filters:
            branches:
              only: main